Udemy QA
twitter: @ste_grider
email: ste.grider@gmail.com
monday to friday answered question 9 PST


========


12-19-2019 (updated 1-7-2020)

In the next lecture, we will be creating a very small demo app using Codepen. If you have any issues at all, there are troubleshooting steps in the lecture note "Code Pen Solutions and Blank White Screen Help(https://www.udemy.com/course/react-redux/learn/lecture/13240386#questions)"

The finished running application is available here: https://codepen.io/sgrider/pen/MxPKJE

If that application does not run in your browser, then your browser or network is blocking Codepen.

Some suggestions to keep in mind before continuing:

1. Use a Diffchecker(https://www.diffchecker.com/) to compare your code with the completed pen: https://codepen.io/sgrider/pen/MxPKJE

2. Check to see if the completed pen's settings match yours. The versions may be older but the order of imports should be the same and the settings like the JS Preprocessor should match. When the lecture video was recorded the Preprocessor setting was not required. Do not set the JS Preprocessor to blank to match the video.

3. Many students have had browser extensions or settings that are blocking the CDN's from working to load the libraries in CodePen. Please make sure to test your pen in private browsing mode with all extensions disabled.


=====


tool for making a tiny React App : goo.gl/T6zQ9q
Codepen : setting -> javascript -> external script -> react -> react-dom -> save and close

HTML
<div id="root" />

CSS
div {
  height: 100vh;
  width:100vw;
} 
.panel {
  position:absolute;
  box-shadow: 0 0 50px grey;
  background-image: url('data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" width="100" height="18" viewBox="0 0 100 18"%3E%3Cpath fill="%239C92AC" fill-opacity="0.4" d="M61.82 18c3.47-1.45 6.86-3.78 11.3-7.34C78 6.76 80.34 5.1 83.87 3.42 88.56 1.16 93.75 0 100 0v6.16C98.76 6.05 97.43 6 96 6c-9.59 0-14.23 2.23-23.13 9.34-1.28 1.03-2.39 1.9-3.4 2.66h-7.65zm-23.64 0H22.52c-1-.76-2.1-1.63-3.4-2.66C11.57 9.3 7.08 6.78 0 6.16V0c6.25 0 11.44 1.16 16.14 3.42 3.53 1.7 5.87 3.35 10.73 7.24 4.45 3.56 7.84 5.9 11.31 7.34zM61.82 0h7.66a39.57 39.57 0 0 1-7.34 4.58C57.44 6.84 52.25 8 46 8S34.56 6.84 29.86 4.58A39.57 39.57 0 0 1 22.52 0h15.66C41.65 1.44 45.21 2 50 2c4.8 0 8.35-.56 11.82-2z"%3E%3C/path%3E%3C/svg%3E');
}

JS
function transform(offset) {
  const cos = Math.cos(offset);
  const sin = Math.sin(offset);
  return { transform: `matrix3d(${sin}, ${-cos}, ${sin}, 0, ${-cos}, ${sin}, 0, 0, 0, ${cos}, ${cos}, ${sin}, 0, 0, 0, 1)` };
}
 
class App extends React.Component {
  state = {styleOne: {}, styleTwo: {} };
  
  onMouseMove = (event) => {
    this.setState({
      styleOne: transform(-event.clientX / event.clientY),
      styleTwo: transform(event.clientX / event.clientY)
    })
  }
 
  render() {
    return <div onMouseMove={this.onMouseMove}>
      <div className="panel" style={this.state.styleOne} />
      <div className="panel" style={this.state.styleTwo} />      
    </div>    
  } 
}

ReactDOM.render(
  <App />,
  document.querySelector('#root')
);


=====


what is React?
React by itself is a single javascript library, react ultimate purpose is to show content (HTML) to users and handle user interaction

JSX?
it looks like HTML and can be placed in Javascript code. Determines the conente of our React app just like normal HTML

React is split into two separate libraries
React
knows what a component is and how to make components work together
ReactDOM
knows how to take a component and make it show up in the DOM


=====


inside do npx create-react-app nameApp have babel, webpack, and dev server
behind the scenes libraries that you dont have to setup to properly write our application


=====


PROJECT DIRECTORY
src : Folder where we put all the source code we srite
public : Folder that stores static files, like images
node_modules : Folder that contains all of our project dependencies
package.json : Records our project dependencies and configures our project
package-lock.json : Records the exact version of package that we install
readme.md : instruction on how to use this project


=====


Component on React is Class or Function that Produce HTML to show the user and handles feedback from the user


=====


babeljs.io for showing how jsx compiled


=====


npm install --save faker (save to local project)


=====


props is system for passing data from a parent component to a child component, and the goal is to customize or configure a child component


=====


functional component : good for simple content
class component : good for just about everything else
  were basically going to say are I going to kind of cheap out here, im going to take an easy out, im going to essetially tell you if youre not creating simple content, you probably want to use a class.
  so if you have any complex logic if you have anything that needs to respond to user input if you have anything that needs to make network request anything in that regard chances are youre going to want
  to make a class based component instead.


=====


developer.mozilla.org/en-US/docs/Web/API/Geolocation_API