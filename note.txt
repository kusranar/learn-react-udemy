Udemy QA
twitter: @ste_grider
email: ste.grider@gmail.com
monday to friday answered question 9 PST


========


12-19-2019 (updated 1-7-2020)

In the next lecture, we will be creating a very small demo app using Codepen. If you have any issues at all, there are troubleshooting steps in the lecture note "Code Pen Solutions and Blank White Screen Help(https://www.udemy.com/course/react-redux/learn/lecture/13240386#questions)"

The finished running application is available here: https://codepen.io/sgrider/pen/MxPKJE

If that application does not run in your browser, then your browser or network is blocking Codepen.

Some suggestions to keep in mind before continuing:

1. Use a Diffchecker(https://www.diffchecker.com/) to compare your code with the completed pen: https://codepen.io/sgrider/pen/MxPKJE

2. Check to see if the completed pen's settings match yours. The versions may be older but the order of imports should be the same and the settings like the JS Preprocessor should match. When the lecture video was recorded the Preprocessor setting was not required. Do not set the JS Preprocessor to blank to match the video.

3. Many students have had browser extensions or settings that are blocking the CDN's from working to load the libraries in CodePen. Please make sure to test your pen in private browsing mode with all extensions disabled.


=====


tool for making a tiny React App : goo.gl/T6zQ9q
Codepen : setting -> javascript -> external script -> react -> react-dom -> save and close

HTML
<div id="root" />

CSS
div {
  height: 100vh;
  width:100vw;
} 
.panel {
  position:absolute;
  box-shadow: 0 0 50px grey;
  background-image: url('data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" width="100" height="18" viewBox="0 0 100 18"%3E%3Cpath fill="%239C92AC" fill-opacity="0.4" d="M61.82 18c3.47-1.45 6.86-3.78 11.3-7.34C78 6.76 80.34 5.1 83.87 3.42 88.56 1.16 93.75 0 100 0v6.16C98.76 6.05 97.43 6 96 6c-9.59 0-14.23 2.23-23.13 9.34-1.28 1.03-2.39 1.9-3.4 2.66h-7.65zm-23.64 0H22.52c-1-.76-2.1-1.63-3.4-2.66C11.57 9.3 7.08 6.78 0 6.16V0c6.25 0 11.44 1.16 16.14 3.42 3.53 1.7 5.87 3.35 10.73 7.24 4.45 3.56 7.84 5.9 11.31 7.34zM61.82 0h7.66a39.57 39.57 0 0 1-7.34 4.58C57.44 6.84 52.25 8 46 8S34.56 6.84 29.86 4.58A39.57 39.57 0 0 1 22.52 0h15.66C41.65 1.44 45.21 2 50 2c4.8 0 8.35-.56 11.82-2z"%3E%3C/path%3E%3C/svg%3E');
}

JS
function transform(offset) {
  const cos = Math.cos(offset);
  const sin = Math.sin(offset);
  return { transform: `matrix3d(${sin}, ${-cos}, ${sin}, 0, ${-cos}, ${sin}, 0, 0, 0, ${cos}, ${cos}, ${sin}, 0, 0, 0, 1)` };
}
 
class App extends React.Component {
  state = {styleOne: {}, styleTwo: {} };
  
  onMouseMove = (event) => {
    this.setState({
      styleOne: transform(-event.clientX / event.clientY),
      styleTwo: transform(event.clientX / event.clientY)
    })
  }
 
  render() {
    return <div onMouseMove={this.onMouseMove}>
      <div className="panel" style={this.state.styleOne} />
      <div className="panel" style={this.state.styleTwo} />      
    </div>    
  } 
}

ReactDOM.render(
  <App />,
  document.querySelector('#root')
);


=====


what is React?
React by itself is a single javascript library, react ultimate purpose is to show content (HTML) to users and handle user interaction

JSX?
it looks like HTML and can be placed in Javascript code. Determines the conente of our React app just like normal HTML

React is split into two separate libraries
React
knows what a component is and how to make components work together
ReactDOM
knows how to take a component and make it show up in the DOM


=====


inside do npx create-react-app nameApp have babel, webpack, and dev server
behind the scenes libraries that you dont have to setup to properly write our application


=====


PROJECT DIRECTORY
src : Folder where we put all the source code we srite
public : Folder that stores static files, like images
node_modules : Folder that contains all of our project dependencies
package.json : Records our project dependencies and configures our project
package-lock.json : Records the exact version of package that we install
readme.md : instruction on how to use this project


=====


Component on React is Class or Function that Produce HTML to show the user and handles feedback from the user


=====


babeljs.io for showing how jsx compiled


=====


npm install --save faker (save to local project)


=====


props is system for passing data from a parent component to a child component, and the goal is to customize or configure a child component


=====


functional component : good for simple content
class component : good for just about everything else
  were basically going to say are I going to kind of cheap out here, im going to take an easy out, im going to essetially tell you if youre not creating simple content, you probably want to use a class.
  so if you have any complex logic if you have anything that needs to respond to user input if you have anything that needs to make network request anything in that regard chances are youre going to want
  to make a class based component instead.


=====


developer.mozilla.org/en-US/docs/Web/API/Geolocation_API


=====


Rules of Class Component
- must be a javascript class
- must extends(sub class) React.Component
- must define a 'render' method that returns some amount of JSX


=====


Rules of States
- only useable with class components, technically can be used with functional components using the hooks system (thing to discuss letter)
- you will confused props with state
- State is a javascript object that contains data relevant to a component
- updating state on a component causes the component to (almost) instantly rerender
- state must be initialized when a component is created
- state can only be updated using the function setState();


=====


constructor() is the first function going to be called any time an instance of this class is created.
  and its more of a function that belongs to the javascript language itself as opposed to some very react specific thing,
  specially named function that is particular to the javascript language not specific to react.
  very good location to initialized our state
  now when we define the constructor method its going to be automatically called with the props object, is the same props object that we saw previously with our functional component.
  before do anything else inside this constructor function, we have to go through one litte kind of ceremonial step and i say ceremonial because basically just required of us we have to do this, 
  we have to call a function called super(props) and we have to pass in the props like so.
  this base class(React.Component) has a constructor function of its own that goes through some amount of setup or has some code inside of it to set up our real component for us.
  when we define a constructor function inside of our app class we are essetially overriding or replacing the constructor function that is inside of the reactor component class.
  but we still want to make sure that all the setup code inside of this things constructor function still gets called.
  so to make sure that the parents or react components constructor function gets called we call super with props.
  super is reference to the parent constructor function and that all it is
  if dont have call super() function very quickly see error


=====


component lifesycle
- constructor (good place to do one-time setup)
- render (avoid doing anything besides returning JSX)
  content visible on screen
- componentDidMount (good place to do data-loading)
  sit and wait for update
- componentDidUpdate (good place to do more data-loading when state/props change)
  sit and wait until this component is not longer shown
- componentWillUnmount (good place to do cleanup (espesially for non-React stuff))

other lifesycle method (rarely used)
- shouldComponentUpdate
- getDrivedStateFromProps
- getSnapshotBeforeUpdate


=====


These represent the stages for the ECMAScript language spec and allow you to use certain features of the language that may or may not be fully supported yet:

https://babeljs.io/docs/en/presets#stage-x-experimental-presets

The TC39 categorizes proposals into the following stages:

Stage 0 - Strawman: just an idea, possible Babel plugin.

Stage 1 - Proposal: this is worth working on.

Stage 2 - Draft: initial spec.

Stage 3 - Candidate: complete spec and initial browser implementations.

Stage 4 - Finished: will be added to the next yearly release.


=====


latitude > 0
Northern Hemisphere
0 : januari
summer : 3, 4, 5, 6, 7, 8

latitude < 0
Southern Hemisphere
0 : januari
summer : 9, 10, 11, 0, 1, 2


=====


i do not want the form to attemp to submit itself and these refresh the page
i will prevent that behavior by calling events that prevent default like so : event.prevenDefault()


=====


anytime we want to change the state or the data of our application we're going to call an action creator
calling action creator is going to produce an action object
this action object describes exacly how we want to change data inside of application
that action object gets fetch to the dispatch function
which in turn is going to make copies, we can imagine of the action object and feed those copies to each of our different reducers.
in turn the reducers are going to run they're going to process those actions are the forms that came in modify their data and then eventually
return some new data. that data that gets returned gets form into some new state object.
so then we wait until we need to somehow updates our state again at some point in the future
so now we have a somewhat reasonable idea of the purpose of each of these steps inside this diagram

combine reducers
all these different functions need to be somehow wired up together
we wire up all the different reducers together by making use of the combine reducers function

thats the result of the console.log of stored get state, we end up with properties on our state object equal to those key name
so we can absolutely feed keys into this object right here with name different form our reducer

we cannot get directly access to our state property, mush throught action dispatch reducers

https://codepen.io/


=====


connect it communicates with that provider not through the props system but through a completely different system of comunication inside of react, called the context system


=====


jsonplaceholder.typicode.com


=====


redux : the redux library
react-redux : integration layer between react and redux
axios : helps us make network request
redux-thunk : middleware to help us make request in a redux application

middleware are essetially function that are going to slightly change the behavior of our redux store
so they will add in new capabilities or new features to the redux side of our application
in these case of redux thunk this is a middleware that is going to help us make network request from the redux app
in the vast vast majority of redux application you are ever going to work on youre going to make use of a middleware like redux thunk


=====


Middleware in Redux
- function that gets called with every action we dispatch
- Has the abillity to STOP, MODIFY, or otherwise mess around with actions
- Tons of open source middleware exist
- most popular use of middleware is for dealing with async actions
- we are going to use a middleware called 'Redux-Thunk' to solve our async issues


=====


synchronous action creator -> instantly returns an action with data ready to go
asynchronous action creator -> takes some amount of time for it to get its data ready to go

action creator -> action -> dispatch -> middleware -> reducers -> state

normal rules :
- action creators must return action objects
- actions must have a type property
- actions can optionally have a payload

rules with redux thunk
- action creators can return action objects
or
- action creators can return functions
- if an action object gets returned, it must have a type
- if an action object gets returned, it can optionally have a payload

action creator -> "Action" either an object or function -> dispatch -> middleware
inside middleware(redux thunk)
if action return function(redux thunk invoke dispatch, with dispatch and getState arguments) -> wait for our request finish -> request complete, dispatch action manually, new action -> dispatch with object
if action return object -> reducers

https://github.com/reduxjs/redux-thunk


=====


rules reducers
- must return any value besides undefined
- produces 'state' or data to be used inside of your app using only previuos state and the section (reducers are pure)
- must not return reach 'out it self' to decide what value of return
- must not mutate its input 'state' argument

pure reducer we are only ever going to return values that use there its input arguments

mutation
example : anytime that we change the contents of an array it is referred to as a mutation

string and number -> immutable value

https://github.com/reduxjs/redux

everytime your dispatch an action this code right here is going to be executed (combineReducers, 162)

_memoize lodash


=====


action fetchPostsAndUser
fetchPosts going to return the inner function
we going to make sure we dispatch that things so this inner function is going to show up inside of redux thunk and get invoked with dispatch
then to make sure that we dont try to do any other logic inside of our action creator until we have successfully fetch that list of posts
we going to make sure that we put await ketword right here in front of that entire call and that going to make sure that we're not going to progress down to the next line of code right here
and so we have successfully fetched a list of posts and dispatched the action for it
now at this point i feel like it would be really valueable to maybe put a debugger statement or a console log inside of this action creator
and then attempt to call it just make sure we really understand the idea of whats going on here


=====


Streamers Computer
Open Broadcaster Software (OBS) -> Video Stream + Stream Key -> Real Time Messaging Protocol(RTMP) Server -> Video feed -> viewers browser


=====


react-router-dom navigation for dom-based apps
react-router-redux -> bindings between Redux and React Router (not necessary)


=====


history (keeps track of the address bar in your browser) -> BrowserRouter (listens to history for changes to the URL) -> Route (Visible only when the path matches the current URL)
only keyword exact at route === exact={true}

user wants to navigate to another page in out app
user clicks a link tag
react router prevents the browser from navigating to the new page and fetching new index.html file
url still changes
history sees update url, takes url and sends it to BrowserRouter
BrowserRouter communicates the url to route components
route components rerender to show new set of components

single page app means that we are only loading up a single HTML document
by clicking on various link tag but when they navigate around they still are making use of the same document
we are just showing and hiding different sets of components based upon the url


=====


Uses everything after TLD (.com .net) or port as the path (Browser Router) -> localhost:3000/page-two
Uses everything after a # as the path (Hash Router) -> localhost:3000/#/page-two
doesnt use the url to track navigation (memory router) -> localhost:3000/


=====


Email/Password Authentication
we store a record in a database with the users email and Password
when the user tries to login, we compare email/password with whats stored in db
a user is 'logged in' when they enter the correct email/password

OAuth Authentication
user Authentication with outside service provider (Google, Linkedin, Facebook)
user authorizes our app to access their information
outside provider tells us about the user
we are trusting the outside provider to correctly handle indenticaation of a user
OAuth can be used for (1) user identication in our app and (2) our app making actions on behalf of user

developer.google.com/identity/protocols/googlescopes
https://developers.google.com/identity/protocols/oauth2/scopes

OAuth for servers
results in a 'token' that a server can use to make requests on behalf of the user
usually used when we have an app that needs to access user data when they are not logged in
difficult to setup because we need to store a lot of info about the user

OAuth for JS Browser apps
results in a 'token' that a browser app can use to make requests on behalf of the user
usually used when we have an app that only needs to access user data while they are logged in
very easy to set up thanks to google js lib to automate flow

(users browser)-> user clicks 'login with google' button -> we use googles js lib to initiate OAuth process -> (google server) googles js lib makes auth request to google -> google displays confirmation screen to user in popup window
-> user accepts -> popup window closes -> (users browser) google js lib invokes a callback in our React/Redux app -> callback provided with authorization token and profile infor for user

steps for setting up OAuth
create a new project at console.developers.google.com -> set up an OAuth confirmation screen -> generate an OAuth client id -> install googles api library, intialize it with the OAuth client id
-> make sure the lib gets called any time the user clicks on the login with google button

gapi documentation


=====


https://github.com/zalmoxisus/redux-devtools-extension

localhost:3000?debug_session=<some_string>
saves all data in redux store between refresher of the page

when you do this redux step tools is going to see that you are trying to start up a debug session
a debug session is where redux dev tools is going to automatically save all of the data inside of your redux store and persist it across refreshes of your application
so you'd normally when we refresh our application all the data isnide of a redux store falls away and we lose it entirely
when you enable this debug session redux step tools is going to make sure that all the data stays around
one thing i want you to be aware of is that once youre done with a debug session you are going to want to remove that query string URL
otherwise redux step tools are just going to continously try to throw your previous state into your store and sometimes your really dont want that
particularly if you change some reduce search or return some other form of data like maybe an array instead of an object
if you continue running a debug session you'll very quickly start to run into errors because redux devtools is trying to throw data into your stored that is no longer valid
example: 
i have two separate debug sessions that are running one where i am logged in the other where i am not logged in.
so if i wanted to i can now easily go back to the previous debug session like go into a logged underscore in
and im going to essentially retrieve the previous state that i had.
no immediately i loaded the page API libraries said oh youre not signed in anymore because i actually had signed out so its going to dispatch the sign out action
but essentially by creating these different debug sessions i can have these different kind of checkpoints of state inside of my application 
that again makes it really easy to develop and debug certain features
remember any time that you are done with the debug session make sure you take off that query string
otherwise youre going to try to throw some data into your store that you probably dont want to throw in


=====


redux-form.com

one of the thing that redux form is going to do for us is manage all of our form data inside of our redux store


=====


npmjs.com/package/json-server

options request right there is because we are making request to a server that is running on a different port
this is related to cors request error if you are a court enforcement policy if you're ever taken a look at cors errors before


=====

internally the browser router creates this history object.
Remember we spoke about how this history object keeps track of the address in the address bar of your browser up at the top.
So anytime that address changes the history object is going to communicate the change over to the browser router.
Now the history object over here is not only about watching the address bar the history object also has the ability to change the address bar as well.
the fact that this history object is created by the browser router.
In other words it is kind of challenging for you and I to write code that can get a handle or a reference to that history object.

Internally the browser router creates this history object then any time that the browser router renders some component like let's say PAGE ONE Capone right here the browser router passes that history object as a prop down to your component.
So inside of any component that gets rendered directly by re-act router it's going to receive this history object.

So remember before we had made a browser router whenever you create a browser router internally that creates an object not just called history it's the browser history object or like the browser flavor of the history object.

So first off history right here the history package was installed automatically with re-act Rotterdam when I've been talking about that history object. 
It's technically a separate library that re-act Rotterdam depends upon as a dependency.

So anytime that we pass in a prop called history the router is going to attempt to use it instead of its default implementation which is to create its own internal history object

BrowserRouter listens to history for changes to the URL
browserRouter creates the history object and the fact that the browserrouter maintains that history object is what makes our life all that chanllenging
So you and I are going to create a history object inside of a dedicated file inside of our project.
Then any time that you and I want to get access to that history object we're just going to import that file.


=====


PUT method : update ALL properties of a record
PATCH method : update SOME properties of a record